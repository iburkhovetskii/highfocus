"""–°–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Railway PostgreSQL –≤ CSV"""
import asyncio
import asyncpg
import csv
import json
import os
from datetime import datetime
from dotenv import load_dotenv

load_dotenv()


async def export_to_csv():
    database_url = os.getenv("DATABASE_URL")
    
    if not database_url:
        print("‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
        print("–ü–æ–ª—É—á–∏—Ç–µ DATABASE_URL –∏–∑ Railway Dashboard:")
        print("1. –ó–∞–π–¥–∏—Ç–µ –≤ PostgreSQL —Å–µ—Ä–≤–∏—Å")
        print("2. Variables ‚Üí DATABASE_URL")
        print("3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ .env —Ñ–∞–π–ª")
        return
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
        conn = await asyncpg.connect(database_url)
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Railway PostgreSQL")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = await conn.fetch("SELECT * FROM users ORDER BY started_at DESC")
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–≤–∏–∑–æ–≤
        results = await conn.fetch("""
            SELECT qr.*, u.username, u.first_name 
            FROM quiz_results qr
            LEFT JOIN users u ON qr.user_id = u.user_id
            ORDER BY qr.completed_at DESC
        """)
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–≤–∏–∑–æ–≤: {len(results)}")
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if users:
            filename_users = f"railway_users_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
            with open(filename_users, 'w', newline='', encoding='utf-8') as f:
                writer = csv.writer(f)
                writer.writerow(['user_id', 'username', 'first_name', 'started_at'])
                for user in users:
                    writer.writerow([
                        user['user_id'],
                        user['username'] or '',
                        user['first_name'] or '',
                        user['started_at']
                    ])
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {filename_users}")
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–≤–∏–∑–æ–≤
        if results:
            filename_results = f"railway_quiz_results_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
            with open(filename_results, 'w', newline='', encoding='utf-8') as f:
                writer = csv.writer(f)
                writer.writerow([
                    'id', 'user_id', 'username', 'first_name', 
                    'focus_type', 'completed_at', 'answers'
                ])
                for result in results:
                    answers = json.loads(result['answers']) if result['answers'] else {}
                    answers_str = json.dumps(answers, ensure_ascii=False)
                    writer.writerow([
                        result['id'],
                        result['user_id'],
                        result['username'] or '',
                        result['first_name'] or '',
                        result['focus_type'],
                        result['completed_at'],
                        answers_str
                    ])
            print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–≤–∏–∑–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {filename_results}")
            
            # –î–µ—Ç–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç —Å —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏
            filename_detailed = f"railway_quiz_detailed_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
            with open(filename_detailed, 'w', newline='', encoding='utf-8') as f:
                writer = csv.writer(f)
                writer.writerow([
                    'id', 'user_id', 'username', 'first_name', 'focus_type', 'completed_at',
                    'q1_type', 'q1_text', 'q2_type', 'q2_text', 'q3_type', 'q3_text',
                    'q4_type', 'q4_text', 'q5_type', 'q5_text', 'q6_type', 'q6_text',
                    'q7_text', 'q8_text'
                ])
                for result in results:
                    answers = json.loads(result['answers']) if result['answers'] else {}
                    row = [
                        result['id'],
                        result['user_id'],
                        result['username'] or '',
                        result['first_name'] or '',
                        result['focus_type'],
                        result['completed_at']
                    ]
                    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã 1-6
                    for i in range(1, 7):
                        q_key = f'q{i}'
                        if q_key in answers and isinstance(answers[q_key], dict):
                            row.append(answers[q_key].get('type', ''))
                            row.append(answers[q_key].get('text', ''))
                        else:
                            row.append('')
                            row.append('')
                    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã 7-8 (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç)
                    for i in range(7, 9):
                        q_key = f'q{i}'
                        if q_key in answers and isinstance(answers[q_key], dict):
                            row.append(answers[q_key].get('text', ''))
                        else:
                            row.append('')
                    writer.writerow(row)
            print(f"‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {filename_detailed}")
        
        await conn.close()
        print("\nüéâ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    asyncio.run(export_to_csv())

