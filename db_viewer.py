"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö High Focus Bot
"""
import asyncio
import aiosqlite
from datetime import datetime


async def show_stats():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    db_path = "highfocus.db"
    
    print("\n" + "="*60)
    print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê HIGH FOCUS BOT")
    print("="*60 + "\n")
    
    try:
        async with aiosqlite.connect(db_path) as db:
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            async with db.execute("SELECT COUNT(*) FROM users") as cursor:
                count = await cursor.fetchone()
                print(f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count[0]}")
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö –∫–≤–∏–∑–æ–≤
            async with db.execute("SELECT COUNT(*) FROM quiz_results") as cursor:
                count = await cursor.fetchone()
                print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ –∫–≤–∏–∑–æ–≤: {count[0]}")
            
            print("\n" + "-"*60)
            print("üéØ –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –¢–ò–ü–ê–ú –§–û–ö–£–°–ê")
            print("-"*60 + "\n")
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º —Ñ–æ–∫—É—Å–∞
            async with db.execute("""
                SELECT focus_type, COUNT(*) as count 
                FROM quiz_results 
                GROUP BY focus_type
                ORDER BY count DESC
            """) as cursor:
                results = await cursor.fetchall()
                
                if results:
                    focus_names = {
                        "creative": "üí° –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π",
                        "analytical": "üß† –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π",
                        "energetic": "‚ö°Ô∏è –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π"
                    }
                    
                    total = sum(r[1] for r in results)
                    for focus_type, count in results:
                        percentage = (count / total * 100) if total > 0 else 0
                        name = focus_names.get(focus_type, focus_type)
                        print(f"{name:25} | {count:3} | {percentage:5.1f}%")
                else:
                    print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            
            print("\n" + "-"*60)
            print("üìã –î–ï–¢–ê–õ–¨–ù–´–ï –û–¢–í–ï–¢–´ (–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5)")
            print("-"*60 + "\n")
            
            # –î–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            async with db.execute("""
                SELECT u.first_name, u.username, r.answers, r.completed_at
                FROM quiz_results r
                JOIN users u ON r.user_id = u.user_id
                ORDER BY r.completed_at DESC
                LIMIT 5
            """) as cursor:
                results = await cursor.fetchall()
                
                if results:
                    import json
                    for idx, (first_name, username, answers_json, completed_at) in enumerate(results, 1):
                        user_display = first_name or username or "–ê–Ω–æ–Ω–∏–º"
                        print(f"\n{idx}. {user_display} ({completed_at}):")
                        try:
                            answers = json.loads(answers_json)
                            for q_num in range(1, 9):
                                answer = answers.get(f"q{q_num}")
                                if answer:
                                    if isinstance(answer, dict):
                                        text = answer.get("text", answer.get("type", "–Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞"))
                                    else:
                                        text = answer
                                    print(f"   Q{q_num}: {text}")
                        except:
                            print(f"   (–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤)")
                        print()
                else:
                    print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n")
            
            print("\n" + "-"*60)
            print("üìà –ü–û–°–õ–ï–î–ù–ò–ï 10 –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
            print("-"*60 + "\n")
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            async with db.execute("""
                SELECT u.first_name, u.username, r.focus_type, r.completed_at
                FROM quiz_results r
                JOIN users u ON r.user_id = u.user_id
                ORDER BY r.completed_at DESC
                LIMIT 10
            """) as cursor:
                results = await cursor.fetchall()
                
                if results:
                    focus_emoji = {
                        "creative": "üí°",
                        "analytical": "üß†",
                        "energetic": "‚ö°Ô∏è"
                    }
                    
                    for first_name, username, focus_type, completed_at in results:
                        emoji = focus_emoji.get(focus_type, "‚ùì")
                        user_display = first_name or username or "–ê–Ω–æ–Ω–∏–º"
                        print(f"{emoji} {user_display:20} | {focus_type:12} | {completed_at}")
                else:
                    print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            
            print("\n" + "-"*60)
            print("üçπ –ü–†–ï–î–ü–û–ß–¢–ï–ù–ò–Ø –ü–û –í–ö–£–°–ê–ú (–í–æ–ø—Ä–æ—Å 8)")
            print("-"*60 + "\n")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–æ–ø—Ä–æ—Å—É 8 (–ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –≤–∫—É—Å–∞–º)
            async with db.execute("""
                SELECT answers FROM quiz_results
            """) as cursor:
                all_answers = await cursor.fetchall()
                
                if all_answers:
                    import json
                    q8_counts = {}
                    
                    for (answers_json,) in all_answers:
                        try:
                            answers = json.loads(answers_json)
                            q8_answer = answers.get("q8")
                            if q8_answer:
                                # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ (—Å—Ç—Ä–æ–∫–∞) –∏ –Ω–æ–≤–æ–≥–æ (dict)
                                if isinstance(q8_answer, dict):
                                    answer_text = q8_answer.get("text", q8_answer.get("type", "unknown"))
                                    q8_counts[answer_text] = q8_counts.get(answer_text, 0) + 1
                                else:
                                    # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
                                    taste_names_old = {
                                        "pear": "üçê –ì—Ä—É—à–∞-–ü–∞—Ä–º–µ–∑–∞–Ω",
                                        "caramel": "üçØ –°–æ–ª—ë–Ω–∞—è –∫–∞—Ä–∞–º–µ–ª—å",
                                        "brownie": "üç´ –ë—Ä–∞—É–Ω–∏",
                                        "want": "ü§î –ï—â—ë –Ω–µ –ø—Ä–æ–±–æ–≤–∞–ª, –Ω–æ —Ö–æ—á—É",
                                        "undecided": "ü§∑ –ü–æ–∫–∞ –Ω–µ —Ä–µ—à–∏–ª"
                                    }
                                    answer_text = taste_names_old.get(q8_answer, q8_answer)
                                    q8_counts[answer_text] = q8_counts.get(answer_text, 0) + 1
                        except:
                            pass
                    
                    if q8_counts:
                        total = sum(q8_counts.values())
                        for taste_text, count in sorted(q8_counts.items(), key=lambda x: x[1], reverse=True):
                            percentage = (count / total * 100) if total > 0 else 0
                            print(f"{taste_text:35} | {count:3} | {percentage:5.1f}%")
                    else:
                        print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                else:
                    print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª highfocus.db —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –±–æ—Ç –±—ã–ª –∑–∞–ø—É—â–µ–Ω —Ö–æ—Ç—è –±—ã —Ä–∞–∑.")
    
    print("\n" + "="*60 + "\n")


async def export_to_csv():
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CSV —Ñ–∞–π–ª"""
    db_path = "highfocus.db"
    
    try:
        async with aiosqlite.connect(db_path) as db:
            async with db.execute("""
                SELECT 
                    u.user_id,
                    u.username,
                    u.first_name,
                    r.focus_type,
                    r.answers,
                    r.completed_at
                FROM quiz_results r
                JOIN users u ON r.user_id = u.user_id
                ORDER BY r.completed_at DESC
            """) as cursor:
                results = await cursor.fetchall()
                
                if results:
                    filename = f"highfocus_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
                    with open(filename, 'w', encoding='utf-8') as f:
                        f.write("user_id,username,first_name,focus_type,answers,completed_at\n")
                        for row in results:
                            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∑–∞–ø—è—Ç—ã–µ –≤ answers
                            answers = str(row[4]).replace(',', ';')
                            f.write(f"{row[0]},{row[1]},{row[2]},{row[3]},\"{answers}\",{row[5]}\n")
                    
                    print(f"\n‚úÖ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")
                else:
                    print("\n‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
                    
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {e}")


async def main():
    print("\nü§ñ High Focus Bot - –£—Ç–∏–ª–∏—Ç–∞ —Ä–∞–±–æ—Ç—ã —Å –ë–î")
    print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
    print("1. –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    print("2. –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ CSV")
    print("0. –í—ã—Ö–æ–¥")
    
    choice = input("\n–í–∞—à –≤—ã–±–æ—Ä: ").strip()
    
    if choice == "1":
        await show_stats()
    elif choice == "2":
        await export_to_csv()
    elif choice == "0":
        print("\n–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã")
    else:
        print("\n‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")


if __name__ == "__main__":
    asyncio.run(main())

