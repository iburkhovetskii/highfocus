import asyncio
import logging
import os
import os as _os
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv

from database import Database
from states import QuizStates
from keyboards import (
    get_start_keyboard,
    get_back_to_start_keyboard,
    get_question_1_keyboard,
    get_question_2_keyboard,
    get_question_3_keyboard,
    get_question_4_keyboard,
    get_question_5_keyboard,
    get_question_6_keyboard,
    get_question_7_keyboard,
    get_question_8_keyboard,
    get_final_keyboard
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=os.getenv("BOT_TOKEN"))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –ë–î (–¥–ª—è Railway —Å Volume)
DB_PATH = os.getenv("DB_PATH", "/data/highfocus.db")
db = Database(db_path=DB_PATH)

# Admins
raw_admins = os.getenv("ADMIN_IDS", "")
ADMIN_IDS = set()
if raw_admins:
    try:
        ADMIN_IDS = {int(x) for x in raw_admins.replace(" ", "").split(",") if x}
    except Exception:
        ADMIN_IDS = set()

def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS and len(ADMIN_IDS) > 0

# –¢–µ–∫—Å—Ç—ã
START_TEXT = """‚ö°Ô∏è –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ High Focus ‚Äî –Ω–∞–ø–∏—Ç–æ–∫ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –¥–µ—Ä–∂–∏—Ç —É–º –≤ —Ç–æ–Ω—É—Å–µ.

–ú—ã —Å–æ–∑–¥–∞–Ω—ã, —á—Ç–æ–±—ã –ø–æ–º–æ–≥–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—é, —ç–Ω–µ—Ä–≥–∏—é –∏ –±–∞–ª–∞–Ω—Å –≤ –º–∏—Ä–µ, –≥–¥–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –±–æ–ª—å—à–µ, —á–µ–º –≤—Ä–µ–º–µ–Ω–∏.

–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å, –∫–∞–∫–æ–π —É —Ç–µ–±—è —Ç–∏–ø —Ñ–æ–∫—É—Å–∞ ‚Äî –∏ –∫–∞–∫–æ–π –≤–∫—É—Å High Focus –≤–∫–ª—é—á–∞–µ—Ç —Ç–µ–±—è –Ω–∞ –º–∞–∫—Å–∏–º—É–º? ‚ö°Ô∏è"""

ABOUT_TEXT = """High Focus ‚Äî —ç—Ç–æ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –º–æ–ª–æ—á–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫ –æ—Ç –≠–∫–æ–ù–∏–≤—ã, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –≥–æ–ª–æ–≤–æ–π.

–í —Å–æ—Å—Ç–∞–≤–µ:
‚òïÔ∏è –≥—É–∞—Ä–∞–Ω–∞ ‚Äî –º—è–≥–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è,
üçÉ L-—Ç–µ–∞–Ω–∏–Ω ‚Äî –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –∏ –±–∞–ª–∞–Ω—Å,
üíä –≤–∏—Ç–∞–º–∏–Ω—ã –≥—Ä—É–ø–ø—ã B ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –º–æ–∑–≥–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è.

–ë–µ–∑ —Å–∞—Ö–∞—Ä–æ–∑—ã. –ë–µ–∑ –ª–∞–∫—Ç–æ–∑—ã. –¢–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–π —Ñ–æ–∫—É—Å –∏ —ç–Ω–µ—Ä–≥–∏—è."""

QUESTIONS = {
    1: "1Ô∏è‚É£ –ö–æ–≥–¥–∞ —Ç–µ–±–µ –Ω—É–∂–Ω–æ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è, —Ç—ã...",
    2: "2Ô∏è‚É£ –ß—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç —Ç–µ–±–µ –≤–æ–π—Ç–∏ –≤ \"—Ä–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫\"?",
    3: "3Ô∏è‚É£ –ß—Ç–æ —á–∞—â–µ –≤—Å–µ–≥–æ –º–µ—à–∞–µ—Ç —Ç–µ–±–µ —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è?",
    4: "4Ô∏è‚É£ –ö–∞–∫ —Ç—ã –æ–±—ã—á–Ω–æ —Ä–µ—à–∞–µ—à—å —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏?",
    5: "5Ô∏è‚É£ –ß—Ç–æ –¥–ª—è —Ç–µ–±—è –ø—Ä–∏–∑–Ω–∞–∫ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ —Ñ–æ–∫—É—Å–∞?",
    6: "6Ô∏è‚É£ –ö–æ–≥–¥–∞ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–±—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–µ–µ –≤—Å–µ–≥–æ?",
}

DIVIDER_TEXT = "üí¨ –ò –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –≤–æ–ø—Ä–æ—Å–∞ ‚Äî —á—Ç–æ–±—ã –º—ã –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞–ª–∏, —á—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ üëá"

QUESTION_7 = "7Ô∏è‚É£ –ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞ –ª–∏ —Ç–µ–±–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –∫–æ—Ñ–µ –∏ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–º —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞–º ‚Äî –Ω–∞–ø–∏—Ç–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è –±–µ–∑ —Å–∞—Ö–∞—Ä–∞ –∏ —Ä–µ–∑–∫–∏—Ö —Å—Ç–∏–º—É–ª—è—Ç–æ—Ä–æ–≤?"

QUESTION_8 = "8Ô∏è‚É£ –ï—Å–ª–∏ —Ç—ã —É–∂–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞–ª(-–∞) High Focus, –∫–∞–∫–æ–π –≤–∫—É—Å —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?"

RESULTS = {
    "creative": """üöÄ –ö–ª–∞—Å—Å! –¢—ã –ø—Ä–æ—à—ë–ª –∫–≤–∏–∑ –¥–æ –∫–æ–Ω—Ü–∞ ‚Äî —Ñ–æ–∫—É—Å —Ç–æ—á–Ω–æ –Ω–∞ –º–µ—Å—Ç–µ ‚ö°Ô∏è

üí° –¢–≤–æ–π —Ç–∏–ø ‚Äî –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ–∫—É—Å.
–¢—ã –º—ã—Å–ª–∏—à—å –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ, –ª–æ–≤–∏—à—å –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –∏–∑ –≤—Å–µ–≥–æ –≤–æ–∫—Ä—É–≥ –∏ —É–º–µ–µ—à—å —Å–æ–µ–¥–∏–Ω—è—Ç—å —Ç–æ, —á—Ç–æ –¥—Ä—É–≥–∏–º –∫–∞–∂–µ—Ç—Å—è –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–º.

üçê –¢–≤–æ–π –≤–∫—É—Å High Focus ‚Äî –ì—Ä—É—à–∞‚Äì–ü–∞—Ä–º–µ–∑–∞–Ω.
–°–º–µ–ª—ã–π, —Å–≤–µ–∂–∏–π –∏ –Ω–µ–æ–±—ã—á–Ω—ã–π ‚Äî –∫–∞–∫ —Ç–≤–æ–∏ –∏–¥–µ–∏.""",
    
    "analytical": """üöÄ –ö–ª–∞—Å—Å! –¢—ã –ø—Ä–æ—à—ë–ª –∫–≤–∏–∑ –¥–æ –∫–æ–Ω—Ü–∞ ‚Äî —Ñ–æ–∫—É—Å —Ç–æ—á–Ω–æ –Ω–∞ –º–µ—Å—Ç–µ ‚ö°Ô∏è

üß† –¢–≤–æ–π —Ç–∏–ø ‚Äî –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —Ñ–æ–∫—É—Å.
–¢—ã –≤–∫–ª—é—á–∞–µ—à—å—Å—è, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å —Ö–∞–æ—Å –∏ –Ω–∞–π—Ç–∏ –ª–æ–≥–∏–∫—É –¥–∞–∂–µ –≤ –∫—Ä–µ–∞—Ç–∏–≤–µ.

üç´ –¢–≤–æ–π –≤–∫—É—Å High Focus ‚Äî –ë—Ä–∞—É–Ω–∏.
–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, –≥–ª—É–±–∏–Ω–∞ –∏ —Ç–æ—á–Ω–æ—Å—Ç—å ‚Äî –≤—Å—ë, –∫–∞–∫ —Ç—ã –ª—é–±–∏—à—å.""",
    
    "energetic": """üöÄ –ö–ª–∞—Å—Å! –¢—ã –ø—Ä–æ—à—ë–ª –∫–≤–∏–∑ –¥–æ –∫–æ–Ω—Ü–∞ ‚Äî —Ñ–æ–∫—É—Å —Ç–æ—á–Ω–æ –Ω–∞ –º–µ—Å—Ç–µ ‚ö°Ô∏è

‚ö°Ô∏è –¢–≤–æ–π —Ç–∏–ø ‚Äî –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π —Ñ–æ–∫—É—Å.
–¢—ã –≤—Å–µ–≥–¥–∞ –≤ –¥–≤–∏–∂–µ–Ω–∏–∏, –∑–∞–¥–∞—ë—à—å —Ç–µ–º–ø –∏ –∑–∞—Ä—è–∂–∞–µ—à—å –≤—Å–µ—Ö –≤–æ–∫—Ä—É–≥.

üçØ –¢–≤–æ–π –≤–∫—É—Å High Focus ‚Äî –°–æ–ª—ë–Ω–∞—è –∫–∞—Ä–∞–º–µ–ª—å.
–ú—è–≥–∫–∏–π –¥—Ä–∞–π–≤ –∏ —Å–∏–ª–∞ ‚Äî –∏–¥–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è —Ç–≤–æ–µ–≥–æ —Ä–∏—Ç–º–∞."""
}

FINAL_TEXT = """–•–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–≤–æ–π –≤–∫—É—Å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?
–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, –ø–æ–∫–∞–∂–∏ –Ω–∞–º –Ω–∞ —Å—Ç–µ–Ω–¥–µ –∏ –ø–æ–ª—É—á–∏ –ø–æ–¥–∞—Ä–æ–∫ üéÅ
–ê –µ—Å–ª–∏ —É–∂–µ –¥–µ–≥—É—Å—Ç–∏—Ä–æ–≤–∞–ª ‚Äî –ø—Ä–∏—Ö–æ–¥–∏ —Å—ã–≥—Ä–∞—Ç—å –≤ –Ω–∞—à–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —Å–æ–±–µ—Ä–∏ —Å—Ç–∏–∫–µ—Ä—ã ‚ö°Ô∏è"""

SUBSCRIBED_TEXT = """–û—Ç–ª–∏—á–Ω–æ! üéâ

–ü—Ä–∏—Ö–æ–¥–∏ –Ω–∞ –Ω–∞—à —Å—Ç–µ–Ω–¥, –ø–æ–∫–∞–∂–∏ –ø–æ–¥–ø–∏—Å–∫—É –∏ –ø–æ–ª—É—á–∏ –ø–æ–¥–∞—Ä–æ–∫ üéÅ
–£–≤–∏–¥–∏–º—Å—è! ‚ö°Ô∏è"""

# –ü–æ–ª–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
ANSWER_TEXTS = {
    "q1_creative": "üí° –ò—â—É –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –∏ –Ω–æ–≤—ã–µ –ø–æ–¥—Ö–æ–¥—ã",
    "q1_analytical": "üß† –†–∞—Å–∫–ª–∞–¥—ã–≤–∞—é –∑–∞–¥–∞—á—É –ø–æ —à–∞–≥–∞–º",
    "q1_energetic": "‚ö°Ô∏è –ü—Ä–æ—Å—Ç–æ –Ω–∞—á–∏–Ω–∞—é –¥–µ–ª–∞—Ç—å ‚Äî —Ñ–æ–∫—É—Å –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ –¥–µ–π—Å—Ç–≤–∏–∏",
    
    "q2_creative": "üé∂ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, –º—É–∑—ã–∫–∞, –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞",
    "q2_analytical": "üìã –ß—ë—Ç–∫–∏–π –ø–ª–∞–Ω –∏ –ø–æ—Ä—è–¥–æ–∫",
    "q2_energetic": "üöÄ –ê–∑–∞—Ä—Ç, –¥–µ–¥–ª–∞–π–Ω –∏ –¥–≤–∏–∂–µ–Ω–∏–µ",
    
    "q3_creative": "üí≠ –û–¥–Ω–æ–æ–±—Ä–∞–∑–∏–µ, —Å–∫—É–∫–∞",
    "q3_analytical": "üì± –®—É–º, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –æ—Ç–≤–ª–µ–∫–∞—é—â–∏–µ –ª—é–¥–∏",
    "q3_energetic": "üí§ –£—Å—Ç–∞–ª–æ—Å—Ç—å –∏ –Ω–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏",
    
    "q4_creative": "üí° –ò—â—É –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ",
    "q4_analytical": "üß† –†–∞–∑–±–∏–≤–∞—é –Ω–∞ —á–∞—Å—Ç–∏ –∏ –∏–¥—É –ø–æ —à–∞–≥–∞–º",
    "q4_energetic": "‚ö°Ô∏è –ë–µ—Ä—É –∏ –¥–µ–ª–∞—é ‚Äî —Ä–∞–∑–±–µ—Ä—É—Å—å –ø–æ –ø—É—Ç–∏",
    
    "q5_creative": "üí° –ü–æ—Ç–æ–∫ –∏–¥–µ–π –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ",
    "q5_analytical": "üß† –ß—ë—Ç–∫–∏–µ –º—ã—Å–ª–∏ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –ø—Ä–æ—Ü–µ—Å—Å–æ–º",
    "q5_energetic": "‚ö°Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –∏ —ç–Ω–µ—Ä–≥–∏—è",
    
    "q6_analytical": "üåÖ –£—Ç—Ä–æ–º ‚Äî –∫–æ–≥–¥–∞ –≤—Å—ë —Ç–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è",
    "q6_creative": "üåá –î–Ω—ë–º ‚Äî –≤ –ø–æ—Ç–æ–∫–µ –∑–∞–¥–∞—á –∏ –æ–±—â–µ–Ω–∏—è",
    "q6_energetic": "üåô –í–µ—á–µ—Ä–æ–º / –Ω–æ—á—å—é ‚Äî –∫–æ–≥–¥–∞ –Ω–∏–∫—Ç–æ –Ω–µ –º–µ—à–∞–µ—Ç",
    
    "q7_yes_need": "‚ö°Ô∏è –î–∞, —ç—Ç–æ —Ç–æ, —á–µ–≥–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç",
    "q7_maybe_taste": "‚òïÔ∏è –í–æ–∑–º–æ–∂–Ω–æ, –µ—Å–ª–∏ –≤–∫—É—Å –±—É–¥–µ—Ç –ø—Ä–∏—è—Ç–Ω—ã–π",
    "q7_curious": "ü§∑ –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å",
    "q7_no_coffee": "üö´ –ù–µ—Ç, —è –æ—Å—Ç–∞—é—Å—å –ø—Ä–∏ –∫–æ—Ñ–µ",
    
    "q8_pear": "üçê –ì—Ä—É—à–∞‚Äì–ü–∞—Ä–º–µ–∑–∞–Ω",
    "q8_caramel": "üçØ –°–æ–ª—ë–Ω–∞—è –∫–∞—Ä–∞–º–µ–ª—å",
    "q8_brownie": "üç´ –ë—Ä–∞—É–Ω–∏",
    "q8_want": "ü§î –ï—â—ë –Ω–µ –ø—Ä–æ–±–æ–≤–∞–ª, –Ω–æ —Ö–æ—á—É",
    "q8_undecided": "ü§∑ –ü–æ–∫–∞ –Ω–µ —Ä–µ—à–∏–ª"
}


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    await db.add_user(
        user_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name
    )
    await message.answer(START_TEXT, reply_markup=get_start_keyboard())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@dp.callback_query(F.data == "back_to_start")
async def back_to_start(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer(START_TEXT, reply_markup=get_start_keyboard())
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ß—Ç–æ –∑–∞ High Focus?"
@dp.callback_query(F.data == "about")
async def about_handler(callback: CallbackQuery):
    await callback.message.answer(ABOUT_TEXT, reply_markup=get_back_to_start_keyboard())
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –∫–≤–∏–∑–∞
@dp.callback_query(F.data == "start_quiz")
async def start_quiz(callback: CallbackQuery, state: FSMContext):
    await state.set_state(QuizStates.question_1)
    await state.update_data(answers={})
    await callback.message.answer(QUESTIONS[1], reply_markup=get_question_1_keyboard())
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–∞ 1
@dp.callback_query(QuizStates.question_1, F.data.startswith("q1_"))
async def process_question_1(callback: CallbackQuery, state: FSMContext):
    focus_type = callback.data.split("_")[1]
    data = await state.get_data()
    answers = data.get("answers", {})
    answers["q1"] = {
        "type": focus_type,
        "text": ANSWER_TEXTS.get(callback.data, callback.data)
    }
    await state.update_data(answers=answers)
    
    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    await callback.message.edit_reply_markup(reply_markup=None)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    selected_answer = ANSWER_TEXTS.get(callback.data, callback.data)
    await callback.message.answer(f"üë§ {selected_answer}")
    
    await state.set_state(QuizStates.question_2)
    await callback.message.answer(QUESTIONS[2], reply_markup=get_question_2_keyboard())
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–∞ 2
@dp.callback_query(QuizStates.question_2, F.data.startswith("q2_"))
async def process_question_2(callback: CallbackQuery, state: FSMContext):
    focus_type = callback.data.split("_")[1]
    data = await state.get_data()
    answers = data.get("answers", {})
    answers["q2"] = {
        "type": focus_type,
        "text": ANSWER_TEXTS.get(callback.data, callback.data)
    }
    await state.update_data(answers=answers)
    
    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    await callback.message.edit_reply_markup(reply_markup=None)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    selected_answer = ANSWER_TEXTS.get(callback.data, callback.data)
    await callback.message.answer(f"üë§ {selected_answer}")
    
    await state.set_state(QuizStates.question_3)
    await callback.message.answer(QUESTIONS[3], reply_markup=get_question_3_keyboard())
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–∞ 3
@dp.callback_query(QuizStates.question_3, F.data.startswith("q3_"))
async def process_question_3(callback: CallbackQuery, state: FSMContext):
    focus_type = callback.data.split("_")[1]
    data = await state.get_data()
    answers = data.get("answers", {})
    answers["q3"] = {
        "type": focus_type,
        "text": ANSWER_TEXTS.get(callback.data, callback.data)
    }
    await state.update_data(answers=answers)
    
    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    await callback.message.edit_reply_markup(reply_markup=None)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    selected_answer = ANSWER_TEXTS.get(callback.data, callback.data)
    await callback.message.answer(f"üë§ {selected_answer}")
    
    await state.set_state(QuizStates.question_4)
    await callback.message.answer(QUESTIONS[4], reply_markup=get_question_4_keyboard())
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–∞ 4
@dp.callback_query(QuizStates.question_4, F.data.startswith("q4_"))
async def process_question_4(callback: CallbackQuery, state: FSMContext):
    focus_type = callback.data.split("_")[1]
    data = await state.get_data()
    answers = data.get("answers", {})
    answers["q4"] = {
        "type": focus_type,
        "text": ANSWER_TEXTS.get(callback.data, callback.data)
    }
    await state.update_data(answers=answers)
    
    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    await callback.message.edit_reply_markup(reply_markup=None)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    selected_answer = ANSWER_TEXTS.get(callback.data, callback.data)
    await callback.message.answer(f"üë§ {selected_answer}")
    
    await state.set_state(QuizStates.question_5)
    await callback.message.answer(QUESTIONS[5], reply_markup=get_question_5_keyboard())
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–∞ 5
@dp.callback_query(QuizStates.question_5, F.data.startswith("q5_"))
async def process_question_5(callback: CallbackQuery, state: FSMContext):
    focus_type = callback.data.split("_")[1]
    data = await state.get_data()
    answers = data.get("answers", {})
    answers["q5"] = {
        "type": focus_type,
        "text": ANSWER_TEXTS.get(callback.data, callback.data)
    }
    await state.update_data(answers=answers)
    
    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    await callback.message.edit_reply_markup(reply_markup=None)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    selected_answer = ANSWER_TEXTS.get(callback.data, callback.data)
    await callback.message.answer(f"üë§ {selected_answer}")
    
    await state.set_state(QuizStates.question_6)
    await callback.message.answer(QUESTIONS[6], reply_markup=get_question_6_keyboard())
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–∞ 6
@dp.callback_query(QuizStates.question_6, F.data.startswith("q6_"))
async def process_question_6(callback: CallbackQuery, state: FSMContext):
    focus_type = callback.data.split("_")[1]
    data = await state.get_data()
    answers = data.get("answers", {})
    answers["q6"] = {
        "type": focus_type,
        "text": ANSWER_TEXTS.get(callback.data, callback.data)
    }
    await state.update_data(answers=answers)
    
    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    await callback.message.edit_reply_markup(reply_markup=None)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    selected_answer = ANSWER_TEXTS.get(callback.data, callback.data)
    await callback.message.answer(f"üë§ {selected_answer}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    await callback.message.answer(DIVIDER_TEXT)
    await asyncio.sleep(1.5)
    
    await state.set_state(QuizStates.question_7)
    await callback.message.answer(QUESTION_7, reply_markup=get_question_7_keyboard())
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–∞ 7
@dp.callback_query(QuizStates.question_7, F.data.startswith("q7_"))
async def process_question_7(callback: CallbackQuery, state: FSMContext):
    answer = callback.data.split("_", 1)[1]
    data = await state.get_data()
    answers = data.get("answers", {})
    answers["q7"] = {
        "type": answer,
        "text": ANSWER_TEXTS.get(callback.data, callback.data)
    }
    await state.update_data(answers=answers)
    
    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    await callback.message.edit_reply_markup(reply_markup=None)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    selected_answer = ANSWER_TEXTS.get(callback.data, callback.data)
    await callback.message.answer(f"üë§ {selected_answer}")
    
    await state.set_state(QuizStates.question_8)
    await callback.message.answer(QUESTION_8, reply_markup=get_question_8_keyboard())
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–∞ 8 –∏ –ø–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
@dp.callback_query(QuizStates.question_8, F.data.startswith("q8_"))
async def process_question_8(callback: CallbackQuery, state: FSMContext):
    answer = callback.data.split("_", 1)[1]
    data = await state.get_data()
    answers = data.get("answers", {})
    answers["q8"] = {
        "type": answer,
        "text": ANSWER_TEXTS.get(callback.data, callback.data)
    }
    
    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    await callback.message.edit_reply_markup(reply_markup=None)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    selected_answer = ANSWER_TEXTS.get(callback.data, callback.data)
    await callback.message.answer(f"üë§ {selected_answer}")
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–≤–æ–ø—Ä–æ—Å—ã 1-6)
    focus_counts = {"creative": 0, "analytical": 0, "energetic": 0}
    for i in range(1, 7):
        answer_data = answers.get(f"q{i}")
        if answer_data and isinstance(answer_data, dict):
            focus_type = answer_data.get("type")
            if focus_type in focus_counts:
                focus_counts[focus_type] += 1
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π —Ç–∏–ø —Ñ–æ–∫—É—Å–∞
    dominant_focus = max(focus_counts, key=focus_counts.get)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ë–î
    await db.save_quiz_result(
        user_id=callback.from_user.id,
        focus_type=dominant_focus,
        answers=answers
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result_text = RESULTS[dominant_focus]
    await callback.message.answer(result_text)
    await asyncio.sleep(2)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.answer(FINAL_TEXT, reply_markup=get_final_keyboard())
    await state.clear()
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω"
@dp.callback_query(F.data == "already_subscribed")
async def already_subscribed(callback: CallbackQuery):
    await callback.message.answer(SUBSCRIBED_TEXT)
    await callback.answer("–°–ø–∞—Å–∏–±–æ! üéâ")


# –°–ª—É–∂–µ–±–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Telegram ID
@dp.message(Command("whoami"))
async def whoami(message: Message):
    await message.answer(f"–í–∞—à Telegram ID: {message.from_user.id}")


# –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞: –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ (–¥–ª—è Railway/Fly.io –∏ –ø—Ä–æ—á–∏—Ö PaaS)
@dp.message(Command(commands=["redeploy", "restart"]))
async def admin_redeploy(message: Message):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer("‚õîÔ∏è –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. –ù–∞—Å—Ç—Ä–æ–π ADMIN_IDS –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        return
    await message.answer("‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é —Å–µ—Ä–≤–∏—Å... –ë–æ—Ç –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω 3-5 —Å–µ–∫—É–Ω–¥.")

    async def _exit_later():
        await asyncio.sleep(1)
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å –∫–æ–¥–æ–º 1, —á—Ç–æ–±—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏–ª–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        _os._exit(1)

    asyncio.create_task(_exit_later())


# Help
@dp.message(Command("help"))
async def help_cmd(message: Message):
    await message.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start ‚Äî –Ω–∞—á–∞—Ç—å\n/whoami ‚Äî –≤–∞—à Telegram ID\n/redeploy ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)")


# Fallback –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
@dp.message(F.text.regexp(r"^/"))
async def unknown_command(message: Message):
    await message.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /help")


async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    await db.init_db()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())

